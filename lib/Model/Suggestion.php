<?php
/**
 * Suggestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  TutuRu\LegalSuggesterClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* Service suggestions api
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TutuRu\LegalSuggesterClient\Model;

use \ArrayAccess;
use \TutuRu\LegalSuggesterClient\ObjectSerializer;

/**
 * Suggestion Class Doc Comment
 *
 * @category Class
 * @package  TutuRu\LegalSuggesterClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Suggestion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Suggestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inn' => 'string',
    'kpp' => 'string',
    'okpo' => 'string',
    'ogrn' => 'string',
    'name' => 'string',
    'legal_address' => 'string',
    'registration_date' => 'string',
    'director_full_name' => 'string',
    'contact_phones' => 'string[]',
    'full_with_opf' => 'string',
    'short_with_opf' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inn' => null,
    'kpp' => null,
    'okpo' => null,
    'ogrn' => null,
    'name' => null,
    'legal_address' => null,
    'registration_date' => null,
    'director_full_name' => null,
    'contact_phones' => null,
    'full_with_opf' => null,
    'short_with_opf' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inn' => 'inn',
    'kpp' => 'kpp',
    'okpo' => 'okpo',
    'ogrn' => 'ogrn',
    'name' => 'name',
    'legal_address' => 'legalAddress',
    'registration_date' => 'registrationDate',
    'director_full_name' => 'directorFullName',
    'contact_phones' => 'contactPhones',
    'full_with_opf' => 'fullWithOpf',
    'short_with_opf' => 'shortWithOpf'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inn' => 'setInn',
    'kpp' => 'setKpp',
    'okpo' => 'setOkpo',
    'ogrn' => 'setOgrn',
    'name' => 'setName',
    'legal_address' => 'setLegalAddress',
    'registration_date' => 'setRegistrationDate',
    'director_full_name' => 'setDirectorFullName',
    'contact_phones' => 'setContactPhones',
    'full_with_opf' => 'setFullWithOpf',
    'short_with_opf' => 'setShortWithOpf'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inn' => 'getInn',
    'kpp' => 'getKpp',
    'okpo' => 'getOkpo',
    'ogrn' => 'getOgrn',
    'name' => 'getName',
    'legal_address' => 'getLegalAddress',
    'registration_date' => 'getRegistrationDate',
    'director_full_name' => 'getDirectorFullName',
    'contact_phones' => 'getContactPhones',
    'full_with_opf' => 'getFullWithOpf',
    'short_with_opf' => 'getShortWithOpf'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inn'] = isset($data['inn']) ? $data['inn'] : null;
        $this->container['kpp'] = isset($data['kpp']) ? $data['kpp'] : null;
        $this->container['okpo'] = isset($data['okpo']) ? $data['okpo'] : null;
        $this->container['ogrn'] = isset($data['ogrn']) ? $data['ogrn'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['legal_address'] = isset($data['legal_address']) ? $data['legal_address'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['director_full_name'] = isset($data['director_full_name']) ? $data['director_full_name'] : null;
        $this->container['contact_phones'] = isset($data['contact_phones']) ? $data['contact_phones'] : null;
        $this->container['full_with_opf'] = isset($data['full_with_opf']) ? $data['full_with_opf'] : null;
        $this->container['short_with_opf'] = isset($data['short_with_opf']) ? $data['short_with_opf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets inn
     *
     * @return string
     */
    public function getInn()
    {
        return $this->container['inn'];
    }

    /**
     * Sets inn
     *
     * @param string $inn ИНН
     *
     * @return $this
     */
    public function setInn($inn)
    {
        $this->container['inn'] = $inn;

        return $this;
    }

    /**
     * Gets kpp
     *
     * @return string
     */
    public function getKpp()
    {
        return $this->container['kpp'];
    }

    /**
     * Sets kpp
     *
     * @param string $kpp КПП
     *
     * @return $this
     */
    public function setKpp($kpp)
    {
        $this->container['kpp'] = $kpp;

        return $this;
    }

    /**
     * Gets okpo
     *
     * @return string
     */
    public function getOkpo()
    {
        return $this->container['okpo'];
    }

    /**
     * Sets okpo
     *
     * @param string $okpo ОКПО
     *
     * @return $this
     */
    public function setOkpo($okpo)
    {
        $this->container['okpo'] = $okpo;

        return $this;
    }

    /**
     * Gets ogrn
     *
     * @return string
     */
    public function getOgrn()
    {
        return $this->container['ogrn'];
    }

    /**
     * Sets ogrn
     *
     * @param string $ogrn ОГРН
     *
     * @return $this
     */
    public function setOgrn($ogrn)
    {
        $this->container['ogrn'] = $ogrn;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Наименование компании одной строкой (полное) unrestrictedValue
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets legal_address
     *
     * @return string
     */
    public function getLegalAddress()
    {
        return $this->container['legal_address'];
    }

    /**
     * Sets legal_address
     *
     * @param string $legal_address Адрес организации одной строкой
     *
     * @return $this
     */
    public function setLegalAddress($legal_address)
    {
        $this->container['legal_address'] = $legal_address;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date Дата регистрации в формате Y-m-d
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets director_full_name
     *
     * @return string
     */
    public function getDirectorFullName()
    {
        return $this->container['director_full_name'];
    }

    /**
     * Sets director_full_name
     *
     * @param string $director_full_name Должность руководителя
     *
     * @return $this
     */
    public function setDirectorFullName($director_full_name)
    {
        $this->container['director_full_name'] = $director_full_name;

        return $this;
    }

    /**
     * Gets contact_phones
     *
     * @return string[]
     */
    public function getContactPhones()
    {
        return $this->container['contact_phones'];
    }

    /**
     * Sets contact_phones
     *
     * @param string[] $contact_phones contact_phones
     *
     * @return $this
     */
    public function setContactPhones($contact_phones)
    {
        $this->container['contact_phones'] = $contact_phones;

        return $this;
    }

    /**
     * Gets full_with_opf
     *
     * @return string
     */
    public function getFullWithOpf()
    {
        return $this->container['full_with_opf'];
    }

    /**
     * Sets full_with_opf
     *
     * @param string $full_with_opf Полное наименование с ОПФ
     *
     * @return $this
     */
    public function setFullWithOpf($full_with_opf)
    {
        $this->container['full_with_opf'] = $full_with_opf;

        return $this;
    }

    /**
     * Gets short_with_opf
     *
     * @return string
     */
    public function getShortWithOpf()
    {
        return $this->container['short_with_opf'];
    }

    /**
     * Sets short_with_opf
     *
     * @param string $short_with_opf Краткое наименование с ОПФ
     *
     * @return $this
     */
    public function setShortWithOpf($short_with_opf)
    {
        $this->container['short_with_opf'] = $short_with_opf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
